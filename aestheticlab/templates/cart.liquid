<head>
  <link rel="stylesheet" href="{{ 'cart.css' | asset_url }}">
</head>

<!DOCTYPE html>
  <html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
  
  </head>
  
  <body style="background-image: url('{{ 'al_background.png' | asset_url }}'); background-size: cover; background-position: center center;">
    
  
    <div class="cart-container" id="cartContainer">
      <img src="{{ 'al_logo.png' | asset_url }}" alt="Brand Logo" class="brand-logo">
      <div class="cart-header">
        <h1>Your Cart</h1>
      </div>
  
      <form action="/cart" method="post" novalidate id="cart-form">
        <table>
          <thead>
            <tr>
              <th colspan="2">Product</th>
              <th>Price</th>
              <th>Qty</th>
              <th>Total</th>
            </tr>
          </thead>
          <tbody>
            {% for item in cart.items %}
              <tr>
                <td>
                  <a href="{{ item.url | within: collections.all }}">
                    <img src="{{ item | img_url: 'medium' }}" alt="{{ item.title | escape }}">
                  </a>
                </td>
                <td>
                  <a href="{{ item.url }}">{{ item.product.title }}</a>
                  {% if item.variant.title != "Default Title" %}
                    <br> {{ item.variant.title }}
                  {% endif %}
                  <br>
                  <a href="/cart/change?line={{ forloop.index }}&quantity=0">remove</a>
                </td>
                <td>{{ item.price | money }}</td>
                <td>
                  <div class="quantity-control">
                    <button type="button" class="quantity-btn minus" data-line="{{ forloop.index }}" data-id="{{ item.variant.id }}">-</button>
                    <input type="number" class="cart-quantity" value="{{ item.quantity }}" min="0" step="1" 
                           data-line="{{ forloop.index }}" data-id="{{ item.variant.id }}" 
                           data-stock="{{ item.variant.inventory_quantity }}">
                    <button type="button" class="quantity-btn plus" data-line="{{ forloop.index }}" data-id="{{ item.variant.id }}">+</button>
                  </div>
                </td>
                <td>
                  {% if item.original_line_price != item.line_price %}
                    <span style="text-decoration: line-through;">{{ item.original_line_price | money }}</span>
                  {% endif %}
                  <span class="line-total">{{ item.line_price | money }}</span>
                </td>
              </tr>
            {% endfor %}
          </tbody>
        </table>
  
        <div class="totals-container">
          <div class="subtotal-container">
            <p>Subtotal:</p>
            <p class="total" id="subtotal">{{ cart.total_price | money }}</p>
          </div>
  
          <div class="shipping-container">
            <p>Shipping:</p>
            <p class="total" id="shipping">Free Shipping</p>
          </div>
  
          <div class="grand-total-container">
            <p><strong>Grand Total:</strong></p>
            <p class="grand-total" id="grand-total">{{ cart.total_price | money }}</p>
          </div>
        </div>
  
        <div class="buttons-container">
          <button type="submit" name="checkout" class="checkout-btn">Finalizar pedido</button>
          <a href="/pages/tienda" class="back-button">Seguir comprando</a>
        </div>
      </form>
    </div>
  
    <div class="cart-empty" id="emptyCartContainer">
      <h2>Your cart is empty</h2>
      <div class="back-to-store">
        <a href="/pages/tienda" class="back-button">Back to Store</a>
      </div>
    </div>
  
    <div id="confirmationModal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <h2>The item has been removed</h2>
        <button id="confirmRemove">Ok</button>
      </div>
    </div>
  
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // Utility function to format money values
        function formatMoney(amount) {
          return '$' + (amount / 100).toFixed(2); // Divide by 100 to convert cents to dollars
        }
      
        // Function to update cart state
        function updateCartState() {
          let totalQuantity = 0;
          let subtotal = 0;
          const quantityInputs = document.querySelectorAll('.cart-quantity');
          
          quantityInputs.forEach(input => {
            const quantity = parseInt(input.value) || 0;
            totalQuantity += quantity;
            
            // Calculate line total
            const price = parseFloat(input.closest('tr').querySelector('td:nth-child(3)').textContent.replace(/[^0-9.]/g, ''));
            const lineTotal = price * quantity;
            input.closest('tr').querySelector('.line-total').textContent = formatMoney(lineTotal); // No multiplication by 100 here!
            
            subtotal += lineTotal;
          });
      
          // Update subtotal and grand total
          document.getElementById('subtotal').textContent = formatMoney(subtotal); // No multiplication by 100 here!
          document.getElementById('grand-total').textContent = formatMoney(subtotal); // No multiplication by 100 here!
      
          // Show/hide empty cart message
          const cartContainer = document.getElementById('cartContainer');
          const emptyCartContainer = document.getElementById('emptyCartContainer');
      
          if (totalQuantity === 0) {
            cartContainer.style.display = 'none';
            emptyCartContainer.style.display = 'block';
          } else {
            cartContainer.style.display = 'block';
            emptyCartContainer.style.display = 'none';
          }
        }
      
        // Handle quantity changes
        document.querySelectorAll('.quantity-btn').forEach(button => {
          button.addEventListener('click', function(e) {
            e.preventDefault();
            const input = this.parentElement.querySelector('.cart-quantity');
            const currentValue = parseInt(input.value) || 0;
            const maxStock = parseInt(input.dataset.stock) || Infinity;
            
            if (this.classList.contains('minus') && currentValue > 0) {
              input.value = currentValue - 1;
            } else if (this.classList.contains('plus') && currentValue < maxStock) {
              input.value = currentValue + 1;
            }
            
            // Update cart
            updateCartState();
            
            // Update cart on server
            fetch('/cart/change', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                line: input.dataset.line,
                quantity: input.value,
                id: input.dataset.id
              })
            });
          });
        });
      
        // Handle direct quantity input
        document.querySelectorAll('.cart-quantity').forEach(input => {
          input.addEventListener('change', function() {
            const value = parseInt(this.value) || 0;
            const maxStock = parseInt(this.dataset.stock) || Infinity;
            
            // Ensure value is within bounds
            if (value < 0) this.value = 0;
            if (value > maxStock) this.value = maxStock;
            
            updateCartState();
            
            // Update cart on server
            fetch('/cart/change', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                line: this.dataset.line,
                quantity: this.value,
                id: this.dataset.id
              })
            });
          });
        });
      
        // Handle remove links
        document.querySelectorAll('a[href^="/cart/change"]').forEach(link => {
          link.addEventListener('click', function(e) {
            e.preventDefault();
            const row = this.closest('tr');
            row.style.opacity = '0.5';
            
            fetch(this.href)
              .then(response => response.json())
              .then(() => {
                row.remove();
                updateCartState();
              });
          });
        });
      
        // Modal handling
        const modal = document.getElementById('confirmationModal');
        const closeBtn = document.querySelector('.close');
        const confirmBtn = document.getElementById('confirmRemove');
      
        closeBtn.onclick = function() {
          modal.style.display = "none";
        }
      
        confirmBtn.onclick = function() {
          modal.style.display = "none";
        }
      
        window.onclick = function(event) {
          if (event.target == modal) {
            modal.style.display = "none";
          }
        }
      
        // Initial cart state check
        updateCartState();
      });
      
    </script>
    
  </body>
  </html>