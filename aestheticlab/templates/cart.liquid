<head>
  <link rel="stylesheet" href="{{ 'cart.css' | asset_url }}">
</head>

<!DOCTYPE html>
  <html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
  
  </head>
  
  <body style="background-color: rgb(255, 255, 255);">
    
  
    <div class="cart-container" id="cartContainer">

      <a href="/pages/tienda" title="Ir a la página principal">
        <img src="{{ 'al_logo_negro.png' | asset_url }}" alt="Brand Logo" class="brand-logo">
      </a>
  
      <form action="/cart" method="post" novalidate id="cart-form">
        <div class="cart-items">
          {% for item in cart.items %}
            <div class="cart-item">
              <!-- Imagen del producto -->
              <div class="item-image">
                <a href="{{ item.url | within: collections.all }}">
                  <img src="{{ item | img_url: 'medium' }}" alt="{{ item.title | escape }}">
                </a>
              </div>
        
              <!-- Detalles del producto -->
              <div class="item-details">
                <a href="{{ item.url }}" class="item-title">{{ item.product.title }}</a>
                {% if item.variant.title != "Default Title" %}
                  <p class="item-variant">{{ item.variant.title }}</p>
                {% endif %}
                <a href="/cart/change?line={{ forloop.index }}&quantity=0" class="remove-link">Eliminar</a>
              </div>
        
              <!-- Precio y cantidad del producto -->
              <div class="item-pricing">
                <p class="item-price" data-price="{{ item.price | money_without_currency }}">{{ item.price | money }}</p>
                <span class="line-total">{{ item.price | money }}</span>

                <div class="quantity-control">
                  <button type="button" class="quantity-btn minus" data-line="{{ forloop.index }}" data-id="{{ item.variant.id }}">-</button>
                  <input type="number" class="cart-quantity" value="{{ item.quantity }}" min="0" step="1" 
                         data-line="{{ forloop.index }}" data-id="{{ item.variant.id }}" 
                         data-stock="{{ item.variant.inventory_quantity }}">
                </div>
              </div>
            </div>
          {% endfor %}
        </div>
        
  
        <div class="totals-container">
          <div class="subtotal-container">
            <p>Subtotal:</p>
            <p class="total" id="subtotal">{{ cart.total_price | money }}</p>
          </div>
  
          <div class="shipping-container">
            <p>Envío:</p>
            <p class="total" id="shipping">2-5€</p>
          </div>
  
          <div class="grand-total-container">
            <p><strong>Total:</strong></p>
            <p class="grand-total" id="grand-total">{{ cart.total_price | money }}</p>
          </div>
        </div>
  
        <div class="buttons-container">
          <button type="submit" name="checkout" class="checkout-btn">Finalizar pedido</button>
          <a href="/pages/tienda" class="back-button">Seguir comprando</a>
        </div>
      </form>
    </div>
  
    <div class="cart-empty" id="emptyCartContainer">
      
      <h2 style="letter-spacing: 2px !important;
        text-transform: uppercase !important;
        font-family: 'Titillium Web', sans-serif !important; /* La misma fuente Titillium Web */
        display: block !important; /* Cambiado de inline-block a block */
        transform: scaleY(0.7) !important; /* Aplana el texto verticalmente al 90% de su altura */
        line-height: 1.6 !important; /* Mantener la propiedad de line-height */ /* Usamos !important para asegurarnos que el color sea el correcto */">El carrito esta vacío</h2>
      <div class="back-to-store">
        <a href="/pages/tienda" class="back-button-empty">Vuelve a la tienda</a>
      </div>
    </div>
  
    <div id="confirmationModal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <h2>The item has been removed</h2>
        <button id="confirmRemove">Ok</button>
      </div>
    </div>
  
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // Formatear valores de dinero para mostrar en el carrito
        function formatMoney(amount) {
          return amount.toFixed(2) + '€';
        }
      
        // Función para actualizar el estado del carrito
        function updateCartState() {
          let totalQuantity = 0;
          let subtotal = 0;
      
          // Recorre cada elemento del carrito y recalcula subtotales
          document.querySelectorAll('.cart-item').forEach(item => {
            const quantityInput = item.querySelector('.cart-quantity');
            const quantity = parseInt(quantityInput.value) || 0;
            
            // Usa el precio de la prenda en el atributo `data-price` como base para el cálculo
            const price = parseFloat(item.querySelector('.item-price').dataset.price); 
            
            // Calcula el total de la línea para ese producto
            const lineTotal = price * quantity;
            item.querySelector('.line-total').textContent = formatMoney(lineTotal);
      
            // Actualiza los totales
            totalQuantity += quantity;
            subtotal += lineTotal;
          });
      
          // Actualiza el subtotal y el total general en el carrito
          document.getElementById('subtotal').textContent = formatMoney(subtotal);
          document.getElementById('grand-total').textContent = formatMoney(subtotal);
      
          // Muestra o esconde el mensaje de carrito vacío
          if (totalQuantity === 0) {
            document.getElementById('cartContainer').style.display = 'none';
            document.getElementById('emptyCartContainer').style.display = 'block';
          } else {
            document.getElementById('cartContainer').style.display = 'block';
            document.getElementById('emptyCartContainer').style.display = 'none';
          }
        }
      
        // Maneja los botones de cantidad
        document.querySelectorAll('.quantity-btn').forEach(button => {
          button.addEventListener('click', function(e) {
            e.preventDefault();
            const input = this.parentElement.querySelector('.cart-quantity');
            let currentValue = parseInt(input.value) || 0;
            const maxStock = parseInt(input.dataset.stock) || Infinity;
      
            // Ajusta la cantidad y elimina el producto si llega a 0
            if (this.classList.contains('minus') && currentValue > 0) {
              input.value = currentValue - 1;
            } else if (this.classList.contains('plus') && currentValue < maxStock) {
              input.value = currentValue + 1;
            }
      
            // Elimina el elemento si la cantidad es 0
            if (parseInt(input.value) === 0) {
              this.closest('.cart-item').remove();
            }
      
            updateCartState();
      
            // Envía el cambio al servidor
            fetch('/cart/change', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ line: input.dataset.line, quantity: input.value, id: input.dataset.id })
            });
          });
        });
      
        // Controla el cambio directo en el campo de cantidad
        document.querySelectorAll('.cart-quantity').forEach(input => {
          input.addEventListener('change', function() {
            const value = parseInt(this.value) || 0;
            const maxStock = parseInt(this.dataset.stock) || Infinity;
      
            // Asegura que el valor esté dentro de los límites
            if (value < 0) this.value = 0;
            if (value > maxStock) this.value = maxStock;
      
            // Elimina el elemento si la cantidad es 0
            if (parseInt(this.value) === 0) {
              this.closest('.cart-item').remove();
            }
      
            updateCartState();
      
            // Envía el cambio al servidor
            fetch('/cart/change', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ line: this.dataset.line, quantity: this.value, id: this.dataset.id })
            });
          });
        });
      
        // Actualiza el estado del carrito al cargar
        updateCartState();
      });
      
      
    </script>
    
  </body>
  </html>